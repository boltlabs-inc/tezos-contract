parameter (or (or (or (unit %addCustFunding) (unit %addMerchFunding)) (or (unit %custClaim) (pair %custClose (pair (mutez %customer_balance) (mutez %merchant_balance)) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2)))))) (or (or (unit %expiry) (unit %merchClaim)) (or (bytes %merchDispute) (or (pair %mutualClose (mutez %customer_balance) (pair (signature %merchSig) (mutez %merchant_balance))) (unit %reclaimFunding)))));
storage   (pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))));
code
  {
    # Global variable: is_g1_identity # pair @parameter @storage
    LAMBDA
      bls12_381_g1
      bool
      {
        # sp.result(sp.pack(lparams_0) == sp.bytes('0x050a00000060400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')) # bls12_381_g1
        PACK;       # bytes
        PUSH bytes 0x050a00000060400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000; # bytes : bytes
        COMPARE;    # int
        EQ;         # bool
      }; # lambda bls12_381_g1 bool : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda bls12_381_g1 bool
    UNPAIR;     # @parameter : @storage : lambda bls12_381_g1 bool
    IF_LEFT
      {
        IF_LEFT
          {
            DIG 2;      # lambda bls12_381_g1 bool : @parameter.left.left : @storage
            DROP;       # @parameter.left.left : @storage
            IF_LEFT
              {
                DROP;       # @storage
                # == addCustFunding ==
                # sp.verify(self.data.customer_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @storage
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                CDR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 0) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 0; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 0"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(sp.amount == self.data.customer_balance) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @storage
                GET 3;      # mutez : @storage
                AMOUNT;     # @amount : mutez : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.amount == self.data.customer_balance"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # if self.data.merchant_balance == sp.tez(0): # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @storage
                CDR;        # mutez : @storage
                PUSH mutez 0; # mutez : mutez : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {
                    # self.data.status = 2 # @storage
                    PUSH nat 2; # nat : @storage
                    UPDATE 8;   # @storage
                  }
                  {
                    # self.data.status = 1 # @storage
                    PUSH nat 1; # nat : @storage
                    UPDATE 8;   # @storage
                  }; # @storage
              }
              {
                DROP;       # @storage
                # == addMerchFunding ==
                # sp.verify(self.data.merchant_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @storage
                CAR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchant_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 1) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 1; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 1"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(sp.amount == self.data.merchant_balance) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @storage
                CDR;        # mutez : @storage
                AMOUNT;     # @amount : mutez : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.amount == self.data.merchant_balance"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # self.data.status = 2 # @storage
                PUSH nat 2; # nat : @storage
                UPDATE 8;   # @storage
              }; # @storage
            NIL operation; # list operation : @storage
          }
          {
            IF_LEFT
              {
                DROP;       # @storage : lambda bls12_381_g1 bool
                SWAP;       # lambda bls12_381_g1 bool : @storage
                DROP;       # @storage
                # == custClaim ==
                # sp.verify(self.data.customer_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @storage
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                CDR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 4) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 4; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 4"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(sp.now > self.data.delay_expiry) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @storage
                GET 6;      # timestamp : @storage
                NOW;        # @now : timestamp : @storage
                COMPARE;    # int : @storage
                GT;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.now > self.data.delay_expiry"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.customer_address, self.data.customer_balance) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @storage
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                CDR;        # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                IF_NONE
                  {
                    PUSH int 304; # int : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @storage
                NIL operation; # list operation : @some : @storage
                SWAP;       # @some : list operation : @storage
                DUP 3;      # @storage : @some : list operation : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @some : list operation : @storage
                GET 3;      # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.status = 5 # @storage : list operation
                PUSH nat 5; # nat : @storage : list operation
                UPDATE 8;   # @storage : list operation
                SWAP;       # list operation : @storage
              }
              {
                # == custClose ==
                # sp.verify(self.data.customer_address == sp.sender) # @parameter%custClose : @storage : lambda bls12_381_g1 bool
                SENDER;     # @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                DUP 3;      # @storage : @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                CDR;        # address : @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                COMPARE;    # int : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                EQ;         # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage : lambda bls12_381_g1 bool
                # sp.verify((self.data.status == 2) | (self.data.status == 3)) # @parameter%custClose : @storage : lambda bls12_381_g1 bool
                PUSH nat 2; # nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                DUP 3;      # @storage : nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                GET 8;      # nat : nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                COMPARE;    # int : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                EQ;         # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                IF
                  {
                    PUSH bool True; # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                  }
                  {
                    PUSH nat 3; # nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                    DUP 3;      # @storage : nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                    GET 8;      # nat : nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                    EQ;         # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                  }; # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (self.data.status == 2) | (self.data.status == 3)"; # string : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage : lambda bls12_381_g1 bool
                # sp.verify(self.is_g1_identity(params.sigma1) == False) # @parameter%custClose : @storage : lambda bls12_381_g1 bool
                PUSH bool False; # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool
                DIG 3;      # lambda bls12_381_g1 bool : bool : @parameter%custClose : @storage
                DUP 3;      # @parameter%custClose : lambda bls12_381_g1 bool : bool : @parameter%custClose : @storage
                GET 5;      # bls12_381_g1 : lambda bls12_381_g1 bool : bool : @parameter%custClose : @storage
                EXEC;       # bool : bool : @parameter%custClose : @storage
                COMPARE;    # int : @parameter%custClose : @storage
                EQ;         # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.is_g1_identity(params.sigma1) == False"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                # cust_b = sp.local("cust_b", sp.fst(sp.ediv(params.customer_balance, sp.mutez(1)).open_some())) # @parameter%custClose : @storage
                DUP;        # @parameter%custClose : @parameter%custClose : @storage
                CAR;        # pair (mutez %customer_balance) (mutez %merchant_balance) : @parameter%custClose : @storage
                CAR;        # mutez : @parameter%custClose : @storage
                PUSH mutez 1; # mutez : mutez : @parameter%custClose : @storage
                SWAP;       # mutez : mutez : @parameter%custClose : @storage
                EDIV;       # option (pair nat mutez) : @parameter%custClose : @storage
                IF_NONE
                  {
                    PUSH int 226; # int : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%custClose : @storage
                CAR;        # nat : @parameter%custClose : @storage
                # cust_bal_b = sp.local("cust_bal_b", sp.mul(cust_b.value, sp.bls12_381_fr('0x01'))) # nat : @parameter%custClose : @storage
                PUSH bls12_381_fr 0x01; # bls12_381_fr : nat : @parameter%custClose : @storage
                SWAP;       # nat : bls12_381_fr : @parameter%custClose : @storage
                MUL;        # bls12_381_fr : @parameter%custClose : @storage
                # merch_b = sp.local("merch_b", sp.fst(sp.ediv(params.merchant_balance, sp.mutez(1)).open_some())) # bls12_381_fr : @parameter%custClose : @storage
                PUSH mutez 1; # mutez : bls12_381_fr : @parameter%custClose : @storage
                DUP 3;      # @parameter%custClose : mutez : bls12_381_fr : @parameter%custClose : @storage
                CAR;        # pair (mutez %customer_balance) (mutez %merchant_balance) : mutez : bls12_381_fr : @parameter%custClose : @storage
                CDR;        # mutez : mutez : bls12_381_fr : @parameter%custClose : @storage
                EDIV;       # option (pair nat mutez) : bls12_381_fr : @parameter%custClose : @storage
                IF_NONE
                  {
                    PUSH int 235; # int : bls12_381_fr : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bls12_381_fr : @parameter%custClose : @storage
                CAR;        # nat : bls12_381_fr : @parameter%custClose : @storage
                # merch_bal_b = sp.local("merch_bal_b", sp.mul(merch_b.value, sp.bls12_381_fr('0x01'))) # nat : bls12_381_fr : @parameter%custClose : @storage
                PUSH bls12_381_fr 0x01; # bls12_381_fr : nat : bls12_381_fr : @parameter%custClose : @storage
                SWAP;       # nat : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                MUL;        # bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                # rev_lock_packed = sp.local("rev_lock_packed", sp.concat(sp.list([sp.bytes('0x050a00000020'), params.revocation_lock]))) # bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                DUP 3;      # @parameter%custClose : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                GET 3;      # bytes : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                PUSH bytes 0x050a00000020; # bytes : bytes : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                CONCAT;     # bytes : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                # rev_lock_b = sp.local("rev_lock_b", sp.unpack(rev_lock_packed.value, sp.TBls12_381_fr).open_some()) # bytes : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                UNPACK bls12_381_fr; # option bls12_381_fr : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                IF_NONE
                  {
                    PUSH int 245; # int : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                # prod1 = sp.local("prod1", sp.bls12_381_g2('0x1304a722c780f8b4973dd4da42ef4148af2a580aa3aeddbdaba604a86ec6e62750d699bd13647089278a1e6cc490986f181529059281216c836f054f392efb90b4890a57e46f43f7dc5a8faf0fe41a1b2cd54402dd0af86b78c3a8e175daf9530a2d9d970935dc3e93463565b431d38e13456092bce8da73ed1c2274a02dd29e1e3e0dda7a6f1e0f6c67ab741b4cc20212dcab1cad18c655264f6f56a9ad1a383be2cd0c72d2fdb59ffea76cb1c9d57f84a0d82ea391579bb5e11bc61e40d136')) # @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                PUSH bls12_381_g2 0x1304a722c780f8b4973dd4da42ef4148af2a580aa3aeddbdaba604a86ec6e62750d699bd13647089278a1e6cc490986f181529059281216c836f054f392efb90b4890a57e46f43f7dc5a8faf0fe41a1b2cd54402dd0af86b78c3a8e175daf9530a2d9d970935dc3e93463565b431d38e13456092bce8da73ed1c2274a02dd29e1e3e0dda7a6f1e0f6c67ab741b4cc20212dcab1cad18c655264f6f56a9ad1a383be2cd0c72d2fdb59ffea76cb1c9d57f84a0d82ea391579bb5e11bc61e40d136; # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                # prod1.value += sp.mul(sp.bls12_381_g2('0x1249832415369e4a3043e21040b95583b7a868b9e73ff520884dd622b694defdfefe31ef0c11ec0956f2ac25b75f4ae00758ec3afe7d5160b2e9310954e5565e83b632d7075429dbd08ad795da021b2d175e49a6e4a402a387933fe5fd6c74b80c097ece2ae44bfe10347cf753165cfe80aea3823f7d140671afad20b620cc089f29f9c4095a8a9cf412290dfef1f8811399067199e2b871477921c38bd7ca53bbb8a89747c51f56ad35ce9f45c1a890417b77076673a683e23a98e23464598f'), self.data.cid) # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                DUP 6;      # @storage : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                CAR;        # bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                PUSH bls12_381_g2 0x1249832415369e4a3043e21040b95583b7a868b9e73ff520884dd622b694defdfefe31ef0c11ec0956f2ac25b75f4ae00758ec3afe7d5160b2e9310954e5565e83b632d7075429dbd08ad795da021b2d175e49a6e4a402a387933fe5fd6c74b80c097ece2ae44bfe10347cf753165cfe80aea3823f7d140671afad20b620cc089f29f9c4095a8a9cf412290dfef1f8811399067199e2b871477921c38bd7ca53bbb8a89747c51f56ad35ce9f45c1a890417b77076673a683e23a98e23464598f; # bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                MUL;        # bls12_381_g2 : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                ADD;        # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                # prod1.value += sp.mul(sp.bls12_381_g2('0x0df5839732a5c6ecc2dac945897afbb775788042b6dade7181f29da2255a7c406f9e990ddf98f81f93c3caa5ec1fd1d40a43d9a34e76ce76b3ae48952ab83996025209ae2d5ad77dcb4b580390b4917fbefd5d9376d8de4ef872bfe5503327ac171a1cddbdfe6ab91794981172bab8c62dcac137c5a5824351d7f35d2b84f03c15ebe48d129ac0fb2dc34fbb230632fd0f8eb2bd39a6e8da0c5fb91aebb61ce522e460d7fd9995832c0f8be09ff44cb4df07d0aa9008207514442814018f61fb'), sp.bls12_381_fr('0x000000000000000000000000000000000000000000000000000000434c4f5345')) # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                PUSH bls12_381_fr 0x000000000000000000000000000000000000000000000000000000434c4f5345; # bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                PUSH bls12_381_g2 0x0df5839732a5c6ecc2dac945897afbb775788042b6dade7181f29da2255a7c406f9e990ddf98f81f93c3caa5ec1fd1d40a43d9a34e76ce76b3ae48952ab83996025209ae2d5ad77dcb4b580390b4917fbefd5d9376d8de4ef872bfe5503327ac171a1cddbdfe6ab91794981172bab8c62dcac137c5a5824351d7f35d2b84f03c15ebe48d129ac0fb2dc34fbb230632fd0f8eb2bd39a6e8da0c5fb91aebb61ce522e460d7fd9995832c0f8be09ff44cb4df07d0aa9008207514442814018f61fb; # bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                MUL;        # bls12_381_g2 : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                ADD;        # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                SWAP;       # @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                # prod1.value += sp.mul(sp.bls12_381_g2('0x02048d8c4b04b83603d7078cda46549325aeb60b9b387a3b0bc8d84d49b5f210ca7dae080c7b5a3e2fb71c6938d5090710822f026a1367ba49f366f8b8605f9c008ed306a0a4b06c00816fb936299249871d77e91c89825e5d70b6e37c4d2e7f04b7abcb4aa2f095e8568b4d0ea9251e93f28bb6d98c058cd47194de7fb33a1c04e2bfe158c3e4dc34f1bf5f4125066b160d63ef314554cca42c22a3f5f57a9f54d8d8557a43661d322dc416985f3558c992b08c378e04a04e4f4043ebd25f38'), rev_lock_b.value) # @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                PUSH bls12_381_g2 0x02048d8c4b04b83603d7078cda46549325aeb60b9b387a3b0bc8d84d49b5f210ca7dae080c7b5a3e2fb71c6938d5090710822f026a1367ba49f366f8b8605f9c008ed306a0a4b06c00816fb936299249871d77e91c89825e5d70b6e37c4d2e7f04b7abcb4aa2f095e8568b4d0ea9251e93f28bb6d98c058cd47194de7fb33a1c04e2bfe158c3e4dc34f1bf5f4125066b160d63ef314554cca42c22a3f5f57a9f54d8d8557a43661d322dc416985f3558c992b08c378e04a04e4f4043ebd25f38; # bls12_381_g2 : @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                MUL;        # bls12_381_g2 : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                ADD;        # bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                # prod1.value += sp.mul(sp.bls12_381_g2('0x03f479529090932a017d95deee54d66048b1c99e286193734db8dc610bc85f62fcf761a61e289da376eddfc8eeb133721985f59205455baf92251ce5d922e27eff8391541d76b836e049041ea3eb394883348bad13053e8181e95be33c0c01500c6775a22a190985223d6ae7ebfdb0ac1ae87fc73d43a1a758086228d6c00f4a5679d497298544ac28ef4c012bba3b8b00f0d3e856f83a98a287e8eacfa516cc49608e99059f9960cc0ef1f9300938170df759157c8eb5f3cda6fd235d057a53'), cust_bal_b.value) # bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage
                DIG 2;      # bls12_381_fr : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage
                PUSH bls12_381_g2 0x03f479529090932a017d95deee54d66048b1c99e286193734db8dc610bc85f62fcf761a61e289da376eddfc8eeb133721985f59205455baf92251ce5d922e27eff8391541d76b836e049041ea3eb394883348bad13053e8181e95be33c0c01500c6775a22a190985223d6ae7ebfdb0ac1ae87fc73d43a1a758086228d6c00f4a5679d497298544ac28ef4c012bba3b8b00f0d3e856f83a98a287e8eacfa516cc49608e99059f9960cc0ef1f9300938170df759157c8eb5f3cda6fd235d057a53; # bls12_381_g2 : bls12_381_fr : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage
                MUL;        # bls12_381_g2 : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage
                ADD;        # bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage
                SWAP;       # bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage
                # prod1.value += sp.mul(sp.bls12_381_g2('0x1071998a1831f568d448c178b1c4d5f90a2c8191a027181957e87735eb7ec6c1b1b6f6245a2cff2d20e19a8b8719d91f05c265f2919fcc701c465462c423e05573442fb2b15eddd921bb77fa1ec29fc54ae24e672eb302ee695bd4726f629a4c0d42acb2a3f744a69cdd32733d6d467357a1d481088147cd086bfc33f391bb68c6a13c831d8deca8e36da604c63c08870c14be3600b29a3844ca2758a33172329ffa38284f99e96791fac534605c109cfe51752bcb8c143d6f86c2aa91a2a9aa'), merch_bal_b.value) # bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage
                PUSH bls12_381_g2 0x1071998a1831f568d448c178b1c4d5f90a2c8191a027181957e87735eb7ec6c1b1b6f6245a2cff2d20e19a8b8719d91f05c265f2919fcc701c465462c423e05573442fb2b15eddd921bb77fa1ec29fc54ae24e672eb302ee695bd4726f629a4c0d42acb2a3f744a69cdd32733d6d467357a1d481088147cd086bfc33f391bb68c6a13c831d8deca8e36da604c63c08870c14be3600b29a3844ca2758a33172329ffa38284f99e96791fac534605c109cfe51752bcb8c143d6f86c2aa91a2a9aa; # bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage
                MUL;        # bls12_381_g2 : bls12_381_g2 : @parameter%custClose : @storage
                ADD;        # bls12_381_g2 : @parameter%custClose : @storage
                # sp.verify(sp.pairing_check(sp.list([(params.sigma1, prod1.value), (params.sigma2, - sp.bls12_381_g2('0x0b9ea946e3fa314fdf01e7f6077b383eb113cb0c6b9c45bdd76579ca6ffcd875828453fe119df06dd96222899e16b70e0597d482200131de43ed4185e8b816339acf1cf17432ef8c9b0ee6bee7ce7f4b90d0e223b463b7b036072ac350984a7d18a06ae675abb45a6fc99a015a6449407d514c13c237a69177a3c467198ffbad00c342fc747c5a02b7c1004aa40518910c0e5dcc467d1effb9f7a6a9b7c13034e1de1509f07be3084f6d83711c614dd8ea5cf875c37c58d8f1e69c1df3fb9fc6'))])), 'pairing check failed') # bls12_381_g2 : @parameter%custClose : @storage
                NIL (pair bls12_381_g1 bls12_381_g2); # list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                PUSH bls12_381_g2 0x0b9ea946e3fa314fdf01e7f6077b383eb113cb0c6b9c45bdd76579ca6ffcd875828453fe119df06dd96222899e16b70e0597d482200131de43ed4185e8b816339acf1cf17432ef8c9b0ee6bee7ce7f4b90d0e223b463b7b036072ac350984a7d18a06ae675abb45a6fc99a015a6449407d514c13c237a69177a3c467198ffbad00c342fc747c5a02b7c1004aa40518910c0e5dcc467d1effb9f7a6a9b7c13034e1de1509f07be3084f6d83711c614dd8ea5cf875c37c58d8f1e69c1df3fb9fc6; # bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                NEG;        # bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                DUP 4;      # @parameter%custClose : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                GET 6;      # bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                PAIR;       # pair bls12_381_g1 bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                CONS;       # list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                SWAP;       # bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                DUP 3;      # @parameter%custClose : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                GET 5;      # bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                PAIR;       # pair bls12_381_g1 bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                CONS;       # list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                PAIRING_CHECK; # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "pairing check failed"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                SWAP;       # @storage : @parameter%custClose
                # self.data.customer_balance = params.customer_balance # @storage : @parameter%custClose
                UNPAIR;     # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                UNPAIR;     # pair (bls12_381_fr %cid) (address %customer_address) : pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry)) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                SWAP;       # pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry)) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                CDR;        # pair (key %customer_public_key) (timestamp %delay_expiry) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                DUP 4;      # @parameter%custClose : pair (key %customer_public_key) (timestamp %delay_expiry) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                CAR;        # pair (mutez %customer_balance) (mutez %merchant_balance) : pair (key %customer_public_key) (timestamp %delay_expiry) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                CAR;        # mutez : pair (key %customer_public_key) (timestamp %delay_expiry) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                PAIR;       # pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                SWAP;       # pair (bls12_381_fr %cid) (address %customer_address) : pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                PAIR;       # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry))) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                PAIR;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : @parameter%custClose
                SWAP;       # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                # self.data.revocation_lock = params.revocation_lock # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                DUP;        # @parameter%custClose : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                DUG 2;      # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : @parameter%custClose
                GET 3;      # bytes : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : @parameter%custClose
                UPDATE 7;   # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : @parameter%custClose
                # self.data.delay_expiry = sp.add_seconds(sp.now, 3) # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : @parameter%custClose
                UNPAIR;     # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry))) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                UNPAIR;     # pair (bls12_381_fr %cid) (address %customer_address) : pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                SWAP;       # pair mutez (pair (key %customer_public_key) (timestamp %delay_expiry)) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                UNPAIR;     # mutez : pair (key %customer_public_key) (timestamp %delay_expiry) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                SWAP;       # pair (key %customer_public_key) (timestamp %delay_expiry) : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                CAR;        # key : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                NOW;        # @now : key : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                PUSH int 3; # int : @now : key : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                ADD;        # timestamp : key : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                SWAP;       # key : timestamp : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                PAIR;       # pair key timestamp : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                SWAP;       # mutez : pair key timestamp : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                PAIR;       # pair mutez (pair key timestamp) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                SWAP;       # pair (bls12_381_fr %cid) (address %customer_address) : pair mutez (pair key timestamp) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                PAIR;       # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp)) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))) : @parameter%custClose
                PAIR;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : @parameter%custClose
                SWAP;       # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                # if params.merchant_balance != sp.tez(0): # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                DUP;        # @parameter%custClose : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                CAR;        # pair (mutez %customer_balance) (mutez %merchant_balance) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                CDR;        # mutez : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                PUSH mutez 0; # mutez : mutez : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                COMPARE;    # int : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                NEQ;        # bool : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                IF
                  {
                    # sp.send(self.data.merchant_address, params.merchant_balance) # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    NIL operation; # list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    DUP 3;      # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    CAR;        # address : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    CONTRACT unit; # option (contract unit) : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    IF_NONE
                      {
                        PUSH int 268; # int : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    DIG 2;      # @parameter%custClose : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    CAR;        # pair (mutez %customer_balance) (mutez %merchant_balance) : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    CDR;        # mutez : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    UNIT;       # unit : mutez : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    CONS;       # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                  }
                  {
                    DROP;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                    NIL operation; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                  }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                SWAP;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : list operation
                # self.data.status = 4 # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : list operation
                PUSH nat 4; # nat : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : list operation
                UPDATE 8;   # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))) : list operation
                SWAP;       # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
              }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
          }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                DROP;       # @storage : lambda bls12_381_g1 bool
                SWAP;       # lambda bls12_381_g1 bool : @storage
                DROP;       # @storage
                # == expiry ==
                # sp.verify(self.data.merchant_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @storage
                CAR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchant_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 2) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 2; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 2"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # self.data.delay_expiry = sp.add_seconds(sp.now, 3) # @storage
                UNPAIR;     # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                UNPAIR;     # pair (bls12_381_fr %cid) (address %customer_address) : pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry)) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                SWAP;       # pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry)) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                UNPAIR;     # mutez : pair (key %customer_public_key) (timestamp %delay_expiry) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                SWAP;       # pair (key %customer_public_key) (timestamp %delay_expiry) : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                CAR;        # key : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                NOW;        # @now : key : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                PUSH int 3; # int : @now : key : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                ADD;        # timestamp : key : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                SWAP;       # key : timestamp : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                PAIR;       # pair key timestamp : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                SWAP;       # mutez : pair key timestamp : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                PAIR;       # pair mutez (pair key timestamp) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                SWAP;       # pair (bls12_381_fr %cid) (address %customer_address) : pair mutez (pair key timestamp) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                PAIR;       # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp)) : pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))
                PAIR;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                # self.data.status = 3 # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                PUSH nat 3; # nat : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                UPDATE 8;   # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
                NIL operation; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
              }
              {
                DROP;       # @storage : lambda bls12_381_g1 bool
                SWAP;       # lambda bls12_381_g1 bool : @storage
                DROP;       # @storage
                # == merchClaim ==
                # sp.verify(self.data.merchant_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @storage
                CAR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchant_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 3) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 3; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 3"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(sp.now > self.data.delay_expiry) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @storage
                GET 6;      # timestamp : @storage
                NOW;        # @now : timestamp : @storage
                COMPARE;    # int : @storage
                GT;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.now > self.data.delay_expiry"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.merchant_address, self.data.customer_balance + self.data.merchant_balance) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @storage
                CAR;        # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                IF_NONE
                  {
                    PUSH int 199; # int : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @storage
                NIL operation; # list operation : @some : @storage
                SWAP;       # @some : list operation : @storage
                DIG 2;      # @storage : @some : list operation
                DUP;        # @storage : @storage : @some : list operation
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @storage : @some : list operation
                CDR;        # mutez : @storage : @some : list operation
                SWAP;       # @storage : mutez : @some : list operation
                DUP;        # @storage : @storage : mutez : @some : list operation
                DUG 4;      # @storage : mutez : @some : list operation : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : mutez : @some : list operation : @storage
                GET 3;      # mutez : mutez : @some : list operation : @storage
                ADD;        # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.status = 5 # @storage : list operation
                PUSH nat 5; # nat : @storage : list operation
                UPDATE 8;   # @storage : list operation
                SWAP;       # list operation : @storage
              }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
          }
          {
            IF_LEFT
              {
                # == merchDispute ==
                # sp.verify(self.data.merchant_address == sp.sender) # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                SENDER;     # @sender : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                DUP 3;      # @storage : @sender : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @sender : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                CAR;        # address : @sender : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                COMPARE;    # int : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                EQ;         # bool : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchant_address == sp.sender"; # string : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    FAILWITH;   # FAILED
                  }; # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                # sp.verify(self.data.status == 4) # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                PUSH nat 4; # nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                DUP 3;      # @storage : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                GET 8;      # nat : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                COMPARE;    # int : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                EQ;         # bool : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 4"; # string : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    FAILWITH;   # FAILED
                  }; # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                # revocation_lock_be = sp.local("revocation_lock_be", sp.list([])) # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                NIL bytes;  # list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                # for i in sp.range(0, 32): ... (sp.TNat) # list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                PUSH nat 0; # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                PUSH bool True; # bool : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                LOOP
                  {
                    SWAP;       # list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    # revocation_lock_be.value.push(sp.slice(self.data.revocation_lock, i, 1).open_some()) # list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    DUP 4;      # @storage : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    GET 7;      # bytes : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    PUSH nat 1; # nat : bytes : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    DUP 4;      # nat : nat : bytes : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    SLICE;      # option bytes : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    IF_NONE
                      {
                        PUSH int 285; # int : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    CONS;       # list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    SWAP;       # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    # loop step # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    PUSH nat 1; # nat : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    ADD;        # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    DUP;        # nat : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    PUSH nat 32; # nat : nat : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    GT;         # bool : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                  }; # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                DROP;       # list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                DIG 3;      # lambda bls12_381_g1 bool : list bytes : @parameter%merchDispute : @storage
                DROP;       # list bytes : @parameter%merchDispute : @storage
                SWAP;       # @parameter%merchDispute : list bytes : @storage
                # sp.verify(sp.concat(revocation_lock_be.value) == sp.sha3(params)) # @parameter%merchDispute : list bytes : @storage
                SHA3;       # bytes : list bytes : @storage
                SWAP;       # list bytes : bytes : @storage
                CONCAT;     # bytes : bytes : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.concat(revocation_lock_be.value) == sp.sha3(params)"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.merchant_address, self.data.customer_balance) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : @storage
                CAR;        # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                IF_NONE
                  {
                    PUSH int 289; # int : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @storage
                NIL operation; # list operation : @some : @storage
                SWAP;       # @some : list operation : @storage
                DUP 3;      # @storage : @some : list operation : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @some : list operation : @storage
                GET 3;      # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.status = 5 # @storage : list operation
                PUSH nat 5; # nat : @storage : list operation
                UPDATE 8;   # @storage : list operation
                SWAP;       # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    # == mutualClose ==
                    # sp.verify(self.data.customer_address == sp.sender) # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    SENDER;     # @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 3;      # @storage : @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CDR;        # address : @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    EQ;         # bool : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        FAILWITH;   # FAILED
                      }; # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    # sp.verify(self.data.status == 2) # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PUSH nat 2; # nat : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 3;      # @storage : nat : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 8;      # nat : nat : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    EQ;         # bool : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.status == 2"; # string : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        FAILWITH;   # FAILED
                      }; # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    # sp.verify(sp.check_signature(self.data.merchant_public_key, params.merchSig, sp.pack(sp.record(cid = self.data.cid, context_string = 'zkChannels mutual close', contract_id = sp.self_address, customer_balance = params.customer_balance, merchant_balance = params.merchant_balance)))) # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP;        # @parameter%mutualClose : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 4;      # mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    SWAP;       # @parameter%mutualClose : mutez : @storage : lambda bls12_381_g1 bool
                    DUP;        # @parameter%mutualClose : @parameter%mutualClose : mutez : @storage : lambda bls12_381_g1 bool
                    DUG 2;      # @parameter%mutualClose : mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # mutez : mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PAIR;       # pair mutez mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    SELF_ADDRESS; # @self : pair mutez mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PAIR;       # pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PUSH string "zkChannels mutual close"; # string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 4;      # @storage : string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # bls12_381_fr : string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PAIR;       # pair bls12_381_fr string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PAIR;       # pair (pair bls12_381_fr string) (pair @self (pair mutez mutez)) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PACK;       # bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    SWAP;       # @parameter%mutualClose : bytes : @storage : lambda bls12_381_g1 bool
                    DUP;        # @parameter%mutualClose : @parameter%mutualClose : bytes : @storage : lambda bls12_381_g1 bool
                    DUG 2;      # @parameter%mutualClose : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 3;      # signature : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 4;      # @storage : signature : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 5;      # key : signature : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CHECK_SIGNATURE; # bool : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.check_signature(self.data.merchant_public_key, params.merchSig, sp.pack(sp.record(cid = self.data.cid, context_string = 'zkChannels mutual close', contract_id = sp.self_address, customer_balance = params.customer_balance, merchant_balance = params.merchant_balance)))"; # string : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        FAILWITH;   # FAILED
                      }; # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    # if params.customer_balance != sp.tez(0): # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP;        # @parameter%mutualClose : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PUSH mutez 0; # mutez : mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    NEQ;        # bool : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {
                        # sp.send(self.data.customer_address, params.customer_balance) # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        NIL operation; # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        DUP 3;      # @storage : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CDR;        # address : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CONTRACT unit; # option (contract unit) : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        IF_NONE
                          {
                            PUSH int 334; # int : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        DUP 3;      # @parameter%mutualClose : @some : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CAR;        # mutez : @some : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        UNIT;       # unit : mutez : @some : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        TRANSFER_TOKENS; # operation : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CONS;       # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                      }
                      {
                        NIL operation; # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                      }; # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    # if params.merchant_balance != sp.tez(0): # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PUSH mutez 0; # mutez : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 3;      # @parameter%mutualClose : mutez : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 4;      # mutez : mutez : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    NEQ;        # bool : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {
                        DIG 3;      # lambda bls12_381_g1 bool : list operation : @parameter%mutualClose : @storage
                        DROP;       # list operation : @parameter%mutualClose : @storage
                        # sp.send(self.data.merchant_address, params.merchant_balance) # list operation : @parameter%mutualClose : @storage
                        DUP 3;      # @storage : list operation : @parameter%mutualClose : @storage
                        GET 3;      # pair (address %merchant_address) (mutez %merchant_balance) : list operation : @parameter%mutualClose : @storage
                        CAR;        # address : list operation : @parameter%mutualClose : @storage
                        CONTRACT unit; # option (contract unit) : list operation : @parameter%mutualClose : @storage
                        IF_NONE
                          {
                            PUSH int 336; # int : list operation : @parameter%mutualClose : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%mutualClose : @storage
                        DIG 2;      # @parameter%mutualClose : @some : list operation : @storage
                        GET 4;      # mutez : @some : list operation : @storage
                        UNIT;       # unit : mutez : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }
                      {
                        SWAP;       # @parameter%mutualClose : list operation : @storage : lambda bls12_381_g1 bool
                        DROP;       # list operation : @storage : lambda bls12_381_g1 bool
                        DIG 2;      # lambda bls12_381_g1 bool : list operation : @storage
                        DROP;       # list operation : @storage
                      }; # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.status = 5 # @storage : list operation
                    PUSH nat 5; # nat : @storage : list operation
                    UPDATE 8;   # @storage : list operation
                    SWAP;       # list operation : @storage
                  }
                  {
                    DROP;       # @storage : lambda bls12_381_g1 bool
                    SWAP;       # lambda bls12_381_g1 bool : @storage
                    DROP;       # @storage
                    # == reclaimFunding ==
                    # sp.verify(self.data.customer_address == sp.sender) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @storage
                    CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                    CDR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.verify(self.data.status == 1) # @storage
                    DUP;        # @storage : @storage
                    GET 8;      # nat : @storage
                    PUSH nat 1; # nat : nat : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.status == 1"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.send(self.data.customer_address, self.data.customer_balance) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @storage
                    CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                    CDR;        # address : @storage
                    CONTRACT unit; # option (contract unit) : @storage
                    IF_NONE
                      {
                        PUSH int 166; # int : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @storage
                    NIL operation; # list operation : @some : @storage
                    SWAP;       # @some : list operation : @storage
                    DUP 3;      # @storage : @some : list operation : @storage
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (key %customer_public_key) (timestamp %delay_expiry))) : @some : list operation : @storage
                    GET 3;      # mutez : @some : list operation : @storage
                    UNIT;       # unit : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.status = 6 # @storage : list operation
                    PUSH nat 6; # nat : @storage : list operation
                    UPDATE 8;   # @storage : list operation
                    SWAP;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
      }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
    NIL operation; # list operation : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
    SWAP;       # list operation : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
      }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status))))
    PAIR;       # pair (list operation) (pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair key timestamp))) (pair (pair (address %merchant_address) (mutez %merchant_balance)) (pair (key %merchant_public_key) (pair (bytes %revocation_lock) (nat %status)))))
  };