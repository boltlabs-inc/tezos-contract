parameter (or (or (or (unit %addCustFunding) (unit %addMerchFunding)) (or (unit %custClaim) (pair %custClose (pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2)))) (pair (pair (bytes %x2) (pair (bytes %y2s_0) (bytes %y2s_1))) (pair (bytes %y2s_2) (pair (bytes %y2s_3) (bytes %y2s_4))))))) (or (or (unit %expiry) (unit %merchClaim)) (or (bytes %merchDispute) (or (pair %mutualClose (mutez %customer_balance) (pair (signature %merchSig) (mutez %merchant_balance))) (unit %reclaimFunding)))));
storage   (pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))));
code
  {
    # Global variable: convert_bytes_to_G2 # pair @parameter @storage
    LAMBDA
      bytes
      bls12_381_g2
      {
        # x = sp.local("x", sp.unpack(sp.bytes('0x050a000000c0') + lparams_0, sp.TBls12_381_g2).open_some()) # bytes
        PUSH bytes 0x050a000000c0; # bytes : bytes
        CONCAT;     # bytes
        UNPACK bls12_381_g2; # option bls12_381_g2
        IF_NONE
          {
            PUSH int 66; # int
            FAILWITH;   # FAILED
          }
          {}; # @some
        # sp.result(x.value) # @some
      }; # lambda bytes bls12_381_g2 : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda bytes bls12_381_g2
    # Global variable: is_g1_identity # pair @parameter @storage : lambda bytes bls12_381_g2
    LAMBDA
      bls12_381_g1
      bool
      {
        # sp.result(sp.pack(lparams_1) == sp.bytes('0x050a00000060400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')) # bls12_381_g1
        PACK;       # bytes
        PUSH bytes 0x050a00000060400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000; # bytes : bytes
        COMPARE;    # int
        EQ;         # bool
      }; # lambda bls12_381_g1 bool : pair @parameter @storage : lambda bytes bls12_381_g2
    SWAP;       # pair @parameter @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
    UNPAIR;     # @parameter : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
    IF_LEFT
      {
        IF_LEFT
          {
            DIG 2;      # lambda bls12_381_g1 bool : @parameter.left.left : @storage : lambda bytes bls12_381_g2
            DROP;       # @parameter.left.left : @storage : lambda bytes bls12_381_g2
            DIG 2;      # lambda bytes bls12_381_g2 : @parameter.left.left : @storage
            DROP;       # @parameter.left.left : @storage
            IF_LEFT
              {
                DROP;       # @storage
                # == addCustFunding ==
                # sp.verify(self.data.customer_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @storage
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                CDR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 0) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 0; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 0"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(sp.amount == self.data.customer_balance) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @storage
                GET 3;      # mutez : @storage
                AMOUNT;     # @amount : mutez : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.amount == self.data.customer_balance"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # if self.data.merchant_balance == sp.tez(0): # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @storage
                GET 3;      # mutez : @storage
                PUSH mutez 0; # mutez : mutez : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {
                    # self.data.status = 2 # @storage
                    PUSH nat 2; # nat : @storage
                    UPDATE 8;   # @storage
                  }
                  {
                    # self.data.status = 1 # @storage
                    PUSH nat 1; # nat : @storage
                    UPDATE 8;   # @storage
                  }; # @storage
              }
              {
                DROP;       # @storage
                # == addMerchFunding ==
                # sp.verify(self.data.merchant_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @storage
                CAR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchant_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 1) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 1; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 1"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(sp.amount == self.data.merchant_balance) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @storage
                GET 3;      # mutez : @storage
                AMOUNT;     # @amount : mutez : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.amount == self.data.merchant_balance"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # self.data.status = 2 # @storage
                PUSH nat 2; # nat : @storage
                UPDATE 8;   # @storage
              }; # @storage
            NIL operation; # list operation : @storage
          }
          {
            IF_LEFT
              {
                DROP;       # @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                SWAP;       # lambda bls12_381_g1 bool : @storage : lambda bytes bls12_381_g2
                DROP;       # @storage : lambda bytes bls12_381_g2
                SWAP;       # lambda bytes bls12_381_g2 : @storage
                DROP;       # @storage
                # == custClaim ==
                # sp.verify(self.data.customer_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @storage
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                CDR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 4) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 4; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 4"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(sp.now > self.data.delay_expiry) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @storage
                GET 5;      # timestamp : @storage
                NOW;        # @now : timestamp : @storage
                COMPARE;    # int : @storage
                GT;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.now > self.data.delay_expiry"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.customer_address, self.data.customer_balance) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @storage
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                CDR;        # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                IF_NONE
                  {
                    PUSH int 313; # int : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @storage
                NIL operation; # list operation : @some : @storage
                SWAP;       # @some : list operation : @storage
                DUP 3;      # @storage : @some : list operation : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @some : list operation : @storage
                GET 3;      # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.status = 5 # @storage : list operation
                PUSH nat 5; # nat : @storage : list operation
                UPDATE 8;   # @storage : list operation
                SWAP;       # list operation : @storage
              }
              {
                # == custClose ==
                # sp.verify(self.data.customer_address == sp.sender) # @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                SENDER;     # @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP 3;      # @storage : @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CDR;        # address : @sender : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                COMPARE;    # int : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                EQ;         # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                # sp.verify((self.data.status == 2) | (self.data.status == 3)) # @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                PUSH nat 2; # nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP 3;      # @storage : nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 8;      # nat : nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                COMPARE;    # int : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                EQ;         # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                IF
                  {
                    PUSH bool True; # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                  }
                  {
                    PUSH nat 3; # nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                    DUP 3;      # @storage : nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                    GET 8;      # nat : nat : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                    COMPARE;    # int : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                    EQ;         # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                  }; # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (self.data.status == 2) | (self.data.status == 3)"; # string : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                SWAP;       # @storage : @parameter%custClose : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                # sp.verify(sp.sha3(sp.concat(sp.list([params.y2s_0, params.y2s_1, params.y2s_2, params.y2s_3, params.y2s_4, params.x2]))) == self.data.merch_ps_pk_hash) # @storage : @parameter%custClose : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP;        # @storage : @storage : @parameter%custClose : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUG 2;      # @storage : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 6;      # bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                NIL bytes;  # list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 3;      # pair (bytes %x2) (pair (bytes %y2s_0) (bytes %y2s_1)) : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CAR;        # bytes : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CONS;       # list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 8;      # bytes : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CONS;       # list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 7;      # bytes : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CONS;       # list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 5;      # bytes : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CONS;       # list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 3;      # pair (bytes %x2) (pair (bytes %y2s_0) (bytes %y2s_1)) : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 4;      # bytes : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CONS;       # list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 3;      # pair (bytes %x2) (pair (bytes %y2s_0) (bytes %y2s_1)) : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                GET 3;      # bytes : list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CONS;       # list bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                CONCAT;     # bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                SHA3;       # bytes : bytes : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                COMPARE;    # int : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                EQ;         # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sha3(sp.concat(sp.list([params.y2s_0, params.y2s_1, params.y2s_2, params.y2s_3, params.y2s_4, params.x2]))) == self.data.merch_ps_pk_hash"; # string : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                # sp.verify(self.is_g1_identity(params.sigma1) == False) # @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                PUSH bool False; # bool : @parameter%custClose : @storage : lambda bls12_381_g1 bool : lambda bytes bls12_381_g2
                DIG 3;      # lambda bls12_381_g1 bool : bool : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : lambda bls12_381_g1 bool : bool : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : lambda bls12_381_g1 bool : bool : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 5;      # bls12_381_g1 : lambda bls12_381_g1 bool : bool : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EXEC;       # bool : bool : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                COMPARE;    # int : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EQ;         # bool : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.is_g1_identity(params.sigma1) == False"; # string : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # cust_b = sp.local("cust_b", sp.fst(sp.ediv(params.customer_balance, sp.mutez(1)).open_some())) # @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP;        # @parameter%custClose : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance)) : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # mutez : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                PUSH mutez 1; # mutez : mutez : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                SWAP;       # mutez : mutez : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EDIV;       # option (pair nat mutez) : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                IF_NONE
                  {
                    PUSH int 235; # int : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # nat : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # cust_bal_b = sp.local("cust_bal_b", sp.mul(cust_b.value, sp.bls12_381_fr('0x01'))) # nat : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                PUSH bls12_381_fr 0x01; # bls12_381_fr : nat : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                SWAP;       # nat : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                MUL;        # bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # merch_b = sp.local("merch_b", sp.fst(sp.ediv(params.merchant_balance, sp.mutez(1)).open_some())) # bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                PUSH mutez 1; # mutez : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : mutez : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : mutez : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance)) : mutez : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 4;      # mutez : mutez : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EDIV;       # option (pair nat mutez) : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                IF_NONE
                  {
                    PUSH int 244; # int : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # nat : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # merch_bal_b = sp.local("merch_bal_b", sp.mul(merch_b.value, sp.bls12_381_fr('0x01'))) # nat : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                PUSH bls12_381_fr 0x01; # bls12_381_fr : nat : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                SWAP;       # nat : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                MUL;        # bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # rev_lock_packed = sp.local("rev_lock_packed", sp.concat(sp.list([sp.bytes('0x050a00000020'), params.revocation_lock]))) # bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 3;      # @parameter%custClose : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 3;      # bytes : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                PUSH bytes 0x050a00000020; # bytes : bytes : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CONCAT;     # bytes : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # rev_lock_b = sp.local("rev_lock_b", sp.unpack(rev_lock_packed.value, sp.TBls12_381_fr).open_some()) # bytes : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                UNPACK bls12_381_fr; # option bls12_381_fr : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                IF_NONE
                  {
                    PUSH int 254; # int : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # prod1 = sp.local("prod1", self.convert_bytes_to_G2(params.x2)) # @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 6;      # lambda bytes bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 5;      # @parameter%custClose : lambda bytes bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 3;      # pair (bytes %x2) (pair (bytes %y2s_0) (bytes %y2s_1)) : lambda bytes bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # bytes : lambda bytes bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EXEC;       # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # prod1.value += sp.mul(self.convert_bytes_to_G2(params.y2s_0), self.data.cid) # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 6;      # @storage : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                CAR;        # bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 8;      # lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 7;      # @parameter%custClose : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 3;      # pair (bytes %x2) (pair (bytes %y2s_0) (bytes %y2s_1)) : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 3;      # bytes : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EXEC;       # bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                MUL;        # bls12_381_g2 : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                ADD;        # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # prod1.value += sp.mul(self.convert_bytes_to_G2(params.y2s_1), sp.bls12_381_fr('0x000000000000000000000000000000000000000000000000000000434c4f5345')) # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                PUSH bls12_381_fr 0x000000000000000000000000000000000000000000000000000000434c4f5345; # bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 8;      # lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 7;      # @parameter%custClose : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 3;      # pair (bytes %x2) (pair (bytes %y2s_0) (bytes %y2s_1)) : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 4;      # bytes : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EXEC;       # bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                MUL;        # bls12_381_g2 : bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                ADD;        # bls12_381_g2 : @some : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                SWAP;       # @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # prod1.value += sp.mul(self.convert_bytes_to_G2(params.y2s_2), rev_lock_b.value) # @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 7;      # lambda bytes bls12_381_g2 : @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 6;      # @parameter%custClose : lambda bytes bls12_381_g2 : @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 5;      # bytes : lambda bytes bls12_381_g2 : @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EXEC;       # bls12_381_g2 : @some : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                MUL;        # bls12_381_g2 : bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                ADD;        # bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # prod1.value += sp.mul(self.convert_bytes_to_G2(params.y2s_3), cust_bal_b.value) # bls12_381_g2 : bls12_381_fr : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DIG 2;      # bls12_381_fr : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 6;      # lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 5;      # @parameter%custClose : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 7;      # bytes : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EXEC;       # bls12_381_g2 : bls12_381_fr : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                MUL;        # bls12_381_g2 : bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                ADD;        # bls12_381_g2 : bls12_381_fr : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                SWAP;       # bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # prod1.value += sp.mul(self.convert_bytes_to_G2(params.y2s_4), merch_bal_b.value) # bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 5;      # lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DUP 4;      # @parameter%custClose : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                GET 8;      # bytes : lambda bytes bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                EXEC;       # bls12_381_g2 : bls12_381_fr : bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                MUL;        # bls12_381_g2 : bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                ADD;        # bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                # sp.verify(sp.pairing_check(sp.list([(params.sigma1, prod1.value), (params.sigma2, - self.convert_bytes_to_G2(params.g2))])), 'pairing check failed') # bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                NIL (pair bls12_381_g1 bls12_381_g2); # list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage : lambda bytes bls12_381_g2
                DIG 4;      # lambda bytes bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                DUP 4;      # @parameter%custClose : lambda bytes bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : lambda bytes bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                CAR;        # pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance)) : lambda bytes bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                GET 3;      # bytes : lambda bytes bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                EXEC;       # bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                NEG;        # bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                DUP 4;      # @parameter%custClose : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                GET 6;      # bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                PAIR;       # pair bls12_381_g1 bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                CONS;       # list (pair bls12_381_g1 bls12_381_g2) : bls12_381_g2 : @parameter%custClose : @storage
                SWAP;       # bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                DUP 3;      # @parameter%custClose : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                GET 5;      # bls12_381_g1 : bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                PAIR;       # pair bls12_381_g1 bls12_381_g2 : list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                CONS;       # list (pair bls12_381_g1 bls12_381_g2) : @parameter%custClose : @storage
                PAIRING_CHECK; # bool : @parameter%custClose : @storage
                IF
                  {}
                  {
                    PUSH string "pairing check failed"; # string : @parameter%custClose : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%custClose : @storage
                SWAP;       # @storage : @parameter%custClose
                # self.data.customer_balance = params.customer_balance # @storage : @parameter%custClose
                UNPAIR;     # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                UNPAIR;     # pair (bls12_381_fr %cid) (address %customer_address) : pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                SWAP;       # pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                CDR;        # pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                DUP 4;      # @parameter%custClose : pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                CAR;        # pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance)) : pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                CAR;        # mutez : pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                PAIR;       # pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                SWAP;       # pair (bls12_381_fr %cid) (address %customer_address) : pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                PAIR;       # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                PAIR;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose
                SWAP;       # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                # self.data.revocation_lock = params.revocation_lock # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                DUP;        # @parameter%custClose : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                DUG 2;      # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose
                GET 3;      # bytes : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose
                UPDATE 5;   # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose
                # self.data.delay_expiry = sp.add_seconds(sp.now, self.data.self_delay) # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose
                DUP;        # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose
                DUG 2;      # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                UNPAIR;     # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                UNPAIR;     # pair (bls12_381_fr %cid) (address %customer_address) : pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                SWAP;       # pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                UNPAIR;     # mutez : pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                SWAP;       # pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                CDR;        # bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                NOW;        # @now : bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                DIG 6;      # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @now : bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                GET 7;      # int : @now : bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                ADD;        # timestamp : bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                PAIR;       # pair timestamp bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                SWAP;       # mutez : pair timestamp bytes : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                PAIR;       # pair mutez (pair timestamp bytes) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                SWAP;       # pair (bls12_381_fr %cid) (address %customer_address) : pair mutez (pair timestamp bytes) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                PAIR;       # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes)) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @parameter%custClose
                PAIR;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : @parameter%custClose
                SWAP;       # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                # if params.merchant_balance != sp.tez(0): # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                DUP;        # @parameter%custClose : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                CAR;        # pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance)) : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                GET 4;      # mutez : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                PUSH mutez 0; # mutez : mutez : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                COMPARE;    # int : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                NEQ;        # bool : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                IF
                  {
                    # sp.send(self.data.merchant_address, params.merchant_balance) # @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    NIL operation; # list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    DUP 3;      # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    CAR;        # address : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    CONTRACT unit; # option (contract unit) : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    IF_NONE
                      {
                        PUSH int 277; # int : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%custClose : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    DIG 2;      # @parameter%custClose : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    CAR;        # pair (pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance))) (pair (bytes %revocation_lock) (pair (bls12_381_g1 %sigma1) (bls12_381_g1 %sigma2))) : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    CAR;        # pair (mutez %customer_balance) (pair (bytes %g2) (mutez %merchant_balance)) : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    GET 4;      # mutez : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    UNIT;       # unit : mutez : @some : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    CONS;       # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                  }
                  {
                    DROP;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                    NIL operation; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                  }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                SWAP;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : list operation
                # self.data.status = 4 # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : list operation
                PUSH nat 4; # nat : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : list operation
                UPDATE 8;   # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))) : list operation
                SWAP;       # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
              }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
          }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
      }
      {
        DIG 3;      # lambda bytes bls12_381_g2 : @parameter.right : @storage : lambda bls12_381_g1 bool
        DROP;       # @parameter.right : @storage : lambda bls12_381_g1 bool
        IF_LEFT
          {
            IF_LEFT
              {
                DROP;       # @storage : lambda bls12_381_g1 bool
                SWAP;       # lambda bls12_381_g1 bool : @storage
                DROP;       # @storage
                # == expiry ==
                # sp.verify(self.data.merchant_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @storage
                CAR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchant_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 2) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 2; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 2"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # self.data.delay_expiry = sp.add_seconds(sp.now, self.data.self_delay) # @storage
                DUP;        # @storage : @storage
                UNPAIR;     # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @storage
                UNPAIR;     # pair (bls12_381_fr %cid) (address %customer_address) : pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @storage
                SWAP;       # pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash)) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @storage
                UNPAIR;     # mutez : pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @storage
                SWAP;       # pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash) : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @storage
                CDR;        # bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @storage
                NOW;        # @now : bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))) : @storage
                DIG 5;      # @storage : @now : bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))
                GET 7;      # int : @now : bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))
                ADD;        # timestamp : bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))
                PAIR;       # pair timestamp bytes : mutez : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))
                SWAP;       # mutez : pair timestamp bytes : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))
                PAIR;       # pair mutez (pair timestamp bytes) : pair (bls12_381_fr %cid) (address %customer_address) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))
                SWAP;       # pair (bls12_381_fr %cid) (address %customer_address) : pair mutez (pair timestamp bytes) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))
                PAIR;       # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes)) : pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))
                PAIR;       # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                # self.data.status = 3 # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                PUSH nat 3; # nat : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                UPDATE 8;   # pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
                NIL operation; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
              }
              {
                DROP;       # @storage : lambda bls12_381_g1 bool
                SWAP;       # lambda bls12_381_g1 bool : @storage
                DROP;       # @storage
                # == merchClaim ==
                # sp.verify(self.data.merchant_address == sp.sender) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @storage
                CAR;        # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchant_address == sp.sender"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(self.data.status == 3) # @storage
                DUP;        # @storage : @storage
                GET 8;      # nat : @storage
                PUSH nat 3; # nat : nat : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 3"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.verify(sp.now > self.data.delay_expiry) # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @storage
                GET 5;      # timestamp : @storage
                NOW;        # @now : timestamp : @storage
                COMPARE;    # int : @storage
                GT;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.now > self.data.delay_expiry"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.merchant_address, self.data.customer_balance + self.data.merchant_balance) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @storage
                CAR;        # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                IF_NONE
                  {
                    PUSH int 197; # int : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @storage
                NIL operation; # list operation : @some : @storage
                SWAP;       # @some : list operation : @storage
                DIG 2;      # @storage : @some : list operation
                DUP;        # @storage : @storage : @some : list operation
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @storage : @some : list operation
                GET 3;      # mutez : @storage : @some : list operation
                SWAP;       # @storage : mutez : @some : list operation
                DUP;        # @storage : @storage : mutez : @some : list operation
                DUG 4;      # @storage : mutez : @some : list operation : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : mutez : @some : list operation : @storage
                GET 3;      # mutez : mutez : @some : list operation : @storage
                ADD;        # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.status = 5 # @storage : list operation
                PUSH nat 5; # nat : @storage : list operation
                UPDATE 8;   # @storage : list operation
                SWAP;       # list operation : @storage
              }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
          }
          {
            IF_LEFT
              {
                # == merchDispute ==
                # sp.verify(self.data.merchant_address == sp.sender) # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                SENDER;     # @sender : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                DUP 3;      # @storage : @sender : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @sender : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                CAR;        # address : @sender : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                COMPARE;    # int : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                EQ;         # bool : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.merchant_address == sp.sender"; # string : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    FAILWITH;   # FAILED
                  }; # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                # sp.verify(self.data.status == 4) # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                PUSH nat 4; # nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                DUP 3;      # @storage : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                GET 8;      # nat : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                COMPARE;    # int : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                EQ;         # bool : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.status == 4"; # string : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    FAILWITH;   # FAILED
                  }; # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                # revocation_lock_be = sp.local("revocation_lock_be", sp.list([])) # @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                NIL bytes;  # list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                # for i in sp.range(0, 32): ... (sp.TNat) # list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                PUSH nat 0; # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                PUSH bool True; # bool : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                LOOP
                  {
                    SWAP;       # list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    # revocation_lock_be.value.push(sp.slice(self.data.revocation_lock, i, 1).open_some()) # list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    DUP 4;      # @storage : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    GET 5;      # bytes : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    PUSH nat 1; # nat : bytes : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    DUP 4;      # nat : nat : bytes : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    SLICE;      # option bytes : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    IF_NONE
                      {
                        PUSH int 294; # int : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    CONS;       # list bytes : nat : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    SWAP;       # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    # loop step # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    PUSH nat 1; # nat : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    ADD;        # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    DUP;        # nat : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    PUSH nat 32; # nat : nat : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                    GT;         # bool : nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                  }; # nat : list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                DROP;       # list bytes : @parameter%merchDispute : @storage : lambda bls12_381_g1 bool
                DIG 3;      # lambda bls12_381_g1 bool : list bytes : @parameter%merchDispute : @storage
                DROP;       # list bytes : @parameter%merchDispute : @storage
                SWAP;       # @parameter%merchDispute : list bytes : @storage
                # sp.verify(sp.concat(revocation_lock_be.value) == sp.sha3(params)) # @parameter%merchDispute : list bytes : @storage
                SHA3;       # bytes : list bytes : @storage
                SWAP;       # list bytes : bytes : @storage
                CONCAT;     # bytes : bytes : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.concat(revocation_lock_be.value) == sp.sha3(params)"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # sp.send(self.data.merchant_address, self.data.customer_balance) # @storage
                DUP;        # @storage : @storage
                GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : @storage
                CAR;        # address : @storage
                CONTRACT unit; # option (contract unit) : @storage
                IF_NONE
                  {
                    PUSH int 298; # int : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @storage
                NIL operation; # list operation : @some : @storage
                SWAP;       # @some : list operation : @storage
                DUP 3;      # @storage : @some : list operation : @storage
                CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @some : list operation : @storage
                GET 3;      # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
                SWAP;       # @storage : list operation
                # self.data.status = 5 # @storage : list operation
                PUSH nat 5; # nat : @storage : list operation
                UPDATE 8;   # @storage : list operation
                SWAP;       # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    # == mutualClose ==
                    # sp.verify(self.data.customer_address == sp.sender) # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    SENDER;     # @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 3;      # @storage : @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CDR;        # address : @sender : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    EQ;         # bool : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        FAILWITH;   # FAILED
                      }; # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    # sp.verify(self.data.status == 2) # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PUSH nat 2; # nat : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 3;      # @storage : nat : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 8;      # nat : nat : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    EQ;         # bool : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.status == 2"; # string : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        FAILWITH;   # FAILED
                      }; # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    # sp.verify(sp.check_signature(self.data.merchant_public_key, params.merchSig, sp.pack(sp.record(cid = self.data.cid, context_string = 'zkChannels mutual close', contract_id = sp.self_address, customer_balance = params.customer_balance, merchant_balance = params.merchant_balance)))) # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP;        # @parameter%mutualClose : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 4;      # mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    SWAP;       # @parameter%mutualClose : mutez : @storage : lambda bls12_381_g1 bool
                    DUP;        # @parameter%mutualClose : @parameter%mutualClose : mutez : @storage : lambda bls12_381_g1 bool
                    DUG 2;      # @parameter%mutualClose : mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # mutez : mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PAIR;       # pair mutez mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    SELF_ADDRESS; # @self : pair mutez mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PAIR;       # pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PUSH string "zkChannels mutual close"; # string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 4;      # @storage : string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # bls12_381_fr : string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PAIR;       # pair bls12_381_fr string : pair @self (pair mutez mutez) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PAIR;       # pair (pair bls12_381_fr string) (pair @self (pair mutez mutez)) : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PACK;       # bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    SWAP;       # @parameter%mutualClose : bytes : @storage : lambda bls12_381_g1 bool
                    DUP;        # @parameter%mutualClose : @parameter%mutualClose : bytes : @storage : lambda bls12_381_g1 bool
                    DUG 2;      # @parameter%mutualClose : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 3;      # signature : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 4;      # @storage : signature : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : signature : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 4;      # key : signature : bytes : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CHECK_SIGNATURE; # bool : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.check_signature(self.data.merchant_public_key, params.merchSig, sp.pack(sp.record(cid = self.data.cid, context_string = 'zkChannels mutual close', contract_id = sp.self_address, customer_balance = params.customer_balance, merchant_balance = params.merchant_balance)))"; # string : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        FAILWITH;   # FAILED
                      }; # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    # if params.customer_balance != sp.tez(0): # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP;        # @parameter%mutualClose : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    CAR;        # mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PUSH mutez 0; # mutez : mutez : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    NEQ;        # bool : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {
                        # sp.send(self.data.customer_address, params.customer_balance) # @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        NIL operation; # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        DUP 3;      # @storage : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CDR;        # address : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CONTRACT unit; # option (contract unit) : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        IF_NONE
                          {
                            PUSH int 343; # int : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        DUP 3;      # @parameter%mutualClose : @some : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CAR;        # mutez : @some : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        UNIT;       # unit : mutez : @some : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        TRANSFER_TOKENS; # operation : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                        CONS;       # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                      }
                      {
                        NIL operation; # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                      }; # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    # if params.merchant_balance != sp.tez(0): # list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    PUSH mutez 0; # mutez : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    DUP 3;      # @parameter%mutualClose : mutez : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    GET 4;      # mutez : mutez : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    COMPARE;    # int : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    NEQ;        # bool : list operation : @parameter%mutualClose : @storage : lambda bls12_381_g1 bool
                    IF
                      {
                        DIG 3;      # lambda bls12_381_g1 bool : list operation : @parameter%mutualClose : @storage
                        DROP;       # list operation : @parameter%mutualClose : @storage
                        # sp.send(self.data.merchant_address, params.merchant_balance) # list operation : @parameter%mutualClose : @storage
                        DUP 3;      # @storage : list operation : @parameter%mutualClose : @storage
                        GET 3;      # pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key)) : list operation : @parameter%mutualClose : @storage
                        CAR;        # address : list operation : @parameter%mutualClose : @storage
                        CONTRACT unit; # option (contract unit) : list operation : @parameter%mutualClose : @storage
                        IF_NONE
                          {
                            PUSH int 345; # int : list operation : @parameter%mutualClose : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%mutualClose : @storage
                        DIG 2;      # @parameter%mutualClose : @some : list operation : @storage
                        GET 4;      # mutez : @some : list operation : @storage
                        UNIT;       # unit : mutez : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }
                      {
                        SWAP;       # @parameter%mutualClose : list operation : @storage : lambda bls12_381_g1 bool
                        DROP;       # list operation : @storage : lambda bls12_381_g1 bool
                        DIG 2;      # lambda bls12_381_g1 bool : list operation : @storage
                        DROP;       # list operation : @storage
                      }; # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.status = 5 # @storage : list operation
                    PUSH nat 5; # nat : @storage : list operation
                    UPDATE 8;   # @storage : list operation
                    SWAP;       # list operation : @storage
                  }
                  {
                    DROP;       # @storage : lambda bls12_381_g1 bool
                    SWAP;       # lambda bls12_381_g1 bool : @storage
                    DROP;       # @storage
                    # == reclaimFunding ==
                    # sp.verify(self.data.customer_address == sp.sender) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @storage
                    CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                    CDR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.customer_address == sp.sender"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.verify(self.data.status == 1) # @storage
                    DUP;        # @storage : @storage
                    GET 8;      # nat : @storage
                    PUSH nat 1; # nat : nat : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.status == 1"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.send(self.data.customer_address, self.data.customer_balance) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @storage
                    CAR;        # pair (bls12_381_fr %cid) (address %customer_address) : @storage
                    CDR;        # address : @storage
                    CONTRACT unit; # option (contract unit) : @storage
                    IF_NONE
                      {
                        PUSH int 164; # int : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @storage
                    NIL operation; # list operation : @some : @storage
                    SWAP;       # @some : list operation : @storage
                    DUP 3;      # @storage : @some : list operation : @storage
                    CAR;        # pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair (mutez %customer_balance) (pair (timestamp %delay_expiry) (bytes %merch_ps_pk_hash))) : @some : list operation : @storage
                    GET 3;      # mutez : @some : list operation : @storage
                    UNIT;       # unit : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.status = 6 # @storage : list operation
                    PUSH nat 6; # nat : @storage : list operation
                    UPDATE 8;   # @storage : list operation
                    SWAP;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
      }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
    NIL operation; # list operation : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
    SWAP;       # list operation : list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
      }; # list operation : pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status))))
    PAIR;       # pair (list operation) (pair (pair (pair (bls12_381_fr %cid) (address %customer_address)) (pair mutez (pair timestamp bytes))) (pair (pair (address %merchant_address) (pair (mutez %merchant_balance) (key %merchant_public_key))) (pair (bytes %revocation_lock) (pair (int %self_delay) (nat %status)))))
  };